import LeanLTL.TraceFun.Defs
import LeanLTL.Trace.Basic
import LeanLTL.Util.SimpAttrs
import Mathlib

/-!
# Basic theory about traces
-/

namespace LeanLTL

namespace TraceFun
variable {œÉ œÉ' œÉ'' Œ± Œ±' Œ≤ Œ≤': Type*}

theorem isSome_fixConst (c: Prop) (f : TraceFun œÉ Prop) (t : Trace œÉ) : (f.fixConst c) t |>.isSome := by
  simp [TraceFun.fixConst]

theorem isSome_fixFalse (f : TraceFun œÉ Prop) (t : Trace œÉ) : f.fixFalse t |>.isSome := isSome_fixConst False f t

theorem isSome_fixTrue (f : TraceFun œÉ Prop) (t : Trace œÉ) : f.fixTrue t |>.isSome := isSome_fixConst True f t

theorem mapPreservesSome (g : Œ± ‚Üí Œ±') (f : TraceFun œÉ Œ±) (h : ‚àÄ (t : Trace œÉ), (f t).isSome) :
    (‚àÄ (t : Trace œÉ), ((TraceFun.map g f) t).isSome) := by simp_all [TraceFun.map]

theorem map‚ÇÇPreservesSome (g : Œ± ‚Üí Œ±' ‚Üí Œ≤) (f : TraceFun œÉ Œ±) (f' : TraceFun œÉ Œ±')
    (h‚ÇÅ : ‚àÄ (t : Trace œÉ), (f t).isSome) (h‚ÇÇ : ‚àÄ (t : Trace œÉ), (f' t).isSome) :
    (‚àÄ (t : Trace œÉ), ((TraceFun.map‚ÇÇ g f f') t).isSome) := by
  intro t; specialize h‚ÇÅ t; specialize h‚ÇÇ t
  simp_all [TraceFun.map‚ÇÇ, Option.bind, Option.isSome]
  aesop

/-!
### Semantics lemmas
-/

@[push_ltl] lemma const_apply (t : Trace œÉ) (c : Œ±) : TraceFun.const c t = c := by rfl

@[simp] lemma eval_of_eq [Inhabited Œ±] (f : œÉ ‚Üí Œ±) (t : Trace œÉ) : TraceFun.of f t = (TraceFun.of f).eval! t := rfl

@[simp] lemma eval_proj0_eq [Inhabited œÉ] (t : Trace œÉ) : TraceFun.proj0 t = TraceFun.proj0.eval! t := rfl

@[simp] lemma shift_apply (t : Trace œÉ) (h : t.Infinite) (f : TraceFun œÉ Œ±) (n : ‚Ñï) :
    (f.shift n) t = f (t.shift n (by simp [h])) := by
  simp [TraceFun.shift, h]

@[simp] lemma shift_apply_eq_some_iff (t : Trace œÉ) (f : TraceFun œÉ Œ±) (n : ‚Ñï) (x : Œ±) :
    (f.shift n) t = some x ‚Üî ‚àÉ h, f (t.shift n h) = some x := by
  simp [TraceFun.shift]

@[simp]
theorem of_eval!_apply_singleton {œÉ Œ±} [Inhabited Œ±] (p : œÉ ‚Üí Œ±) {s} :
    (TraceFun.of p).eval! (Trace.singleton s) = p s := rfl

@[simp]
theorem of_eval!_apply_unshift {œÉ Œ±} [Inhabited Œ±] (p : œÉ ‚Üí Œ±) {s t} :
    (TraceFun.of p).eval! (Trace.unshift s t) = p s := rfl

@[simp]
theorem next_apply_unshift {œÉ Œ±} (f : TraceFun œÉ Œ±) (s : œÉ) (t : Trace œÉ) :
    (TraceFun.next f) (Trace.unshift s t) = f t := by
  simp [TraceFun.next, TraceFun.shift]

/- TODO

@[simp]
lemma eval_map (f: TraceFun œÉ Œ±) (q : Œ± ‚Üí Œ±') (t) :
    (TraceFun.map q f) t = (f t).map q := by rfl
@[simp]
lemma eval_map‚ÇÇ (g : Œ± ‚Üí Œ±' ‚Üí Œ≤) (f‚ÇÅ : TraceFun œÉ Œ±) (f‚ÇÇ : TraceFun œÉ Œ±') (t):
    ((TraceFun.map‚ÇÇ g f‚ÇÅ f‚ÇÇ) t) = ((f‚ÇÅ t).bind fun v1 => (f‚ÇÇ t).bind fun v2 => some (g v1 v2)) := by rfl

def _root_.Option.fixFalse (op: Option Prop) : Prop := op.getD False
@[simp]
lemma _root_.Option.fixFalse_some (p: Prop) : (some p).fixFalse ‚Üî p := Iff.rfl
@[simp]
lemma _root_.Option.fixFalse_none : none.fixFalse ‚Üî False := Iff.rfl

def _root_.Option.fixTrue (op: Option Prop) : Prop := op.getD True
@[simp]
lemma _root_.Option.fixTrue_some (p: Prop) : (some p).fixTrue ‚Üî p := Iff.rfl
@[simp]
lemma _root_.Option.fixTrue_none : none.fixTrue ‚Üî True := Iff.rfl


@[push_ltl] lemma apply_neg_eq (t: Trace œÉ) (f : TraceFun œÉ ùïú) : (f.neg) t = (f t).map (-¬∑) := by rfl
@[push_ltl] lemma apply_ceil_eq (t: Trace œÉ) (f : TraceFun œÉ ‚Ñö) : (f.ceil) t = (f t).map (‚åà¬∑‚åâ) := by
  simp [TraceFun.ceil]; cases f t <;> rfl
@[push_ltl] lemma apply_add_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.add f‚ÇÇ) t) = (f‚ÇÅ t |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 + v2)) := by rfl
@[push_ltl] lemma apply_sub_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.sub f‚ÇÇ) t) = ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 - v2)) := by rfl
@[push_ltl] lemma apply_mul_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.mul f‚ÇÇ) t) = ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 * v2)) := by rfl
@[push_ltl] lemma apply_div_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.div f‚ÇÇ) t) = ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 / v2)) := by rfl
@[push_ltl] lemma apply_min_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.min f‚ÇÇ) t) = ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 ‚äì v2)) := by rfl
@[push_ltl] lemma apply_max_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  ((f‚ÇÅ.max f‚ÇÇ) t) = ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 ‚äî v2)) := by rfl
@[push_ltl] lemma apply_eq_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ Œ±) :
  (t ‚ä® (f‚ÇÅ.eq f‚ÇÇ)) ‚Üî ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ t |>.bind fun v2 => (v1 = v2)).fixTrue := by
  cases h‚ÇÅ: f‚ÇÅ t <;> cases h‚ÇÇ: f‚ÇÇ t <;>
  simp_all [TraceSet.mem, TraceFun.eq, TraceFun.map‚ÇÇ, TraceFun.fixConstConvert, TraceFun.fixConst, Option.get]
  <;> repeat split
  <;> simp_all

@[push_ltl] lemma apply_lt_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  (t‚ä®(f‚ÇÅ.lt f‚ÇÇ)) ‚Üî ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 < v2)).fixTrue := by
  cases h‚ÇÅ: f‚ÇÅ t <;> cases h‚ÇÇ: f‚ÇÇ t <;>
  simp_all [TraceSet.mem, TraceFun.lt, TraceFun.map‚ÇÇ, TraceFun.fixConstConvert, TraceFun.fixConst, Option.get]
  <;> repeat split
  <;> simp_all
@[push_ltl] lemma apply_gt_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  (t‚ä®(f‚ÇÅ.gt f‚ÇÇ)) ‚Üî ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 > v2)).fixTrue := by
  cases h‚ÇÅ: f‚ÇÅ t <;> cases h‚ÇÇ: f‚ÇÇ t <;>
  simp_all [TraceSet.mem, TraceFun.gt, TraceFun.map‚ÇÇ, TraceFun.fixConstConvert, TraceFun.fixConst, Option.get]
  <;> repeat split
  <;> simp_all
@[push_ltl] lemma apply_leq_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  (t‚ä®(f‚ÇÅ.leq f‚ÇÇ)) ‚Üî ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 ‚â§ v2)).fixTrue := by
  cases h‚ÇÅ: f‚ÇÅ t <;> cases h‚ÇÇ: f‚ÇÇ t <;>
  simp_all [TraceSet.mem, TraceFun.leq, TraceFun.map‚ÇÇ, TraceFun.fixConstConvert, TraceFun.fixConst, Option.get]
  <;> repeat split
  <;> simp_all
@[push_ltl] lemma apply_geq_eq (t: Trace œÉ) (f‚ÇÅ f‚ÇÇ : TraceFun œÉ ùïú) :
  (t‚ä®(f‚ÇÅ.geq f‚ÇÇ)) ‚Üî ((f‚ÇÅ t) |>.bind fun v1 => f‚ÇÇ.eval t |>.bind fun v2 => (v1 ‚â• v2)).fixTrue := by
  cases h‚ÇÅ: f‚ÇÅ t <;> cases h‚ÇÇ: f‚ÇÇ t <;>
  simp_all [TraceSet.mem, TraceFun.geq, TraceFun.map‚ÇÇ, TraceFun.fixConstConvert, TraceFun.fixConst, Option.get]
  <;> repeat split
  <;> simp_all


@[push_ltl] lemma apply_shift_eq (t: Trace œÉ) (f : TraceFun œÉ Œ±) (c: ‚Ñï) : ((f.shift c) t) =
  if h: c < t.length
  then f (t.shift c h)
  else none := by
  rfl
-/
